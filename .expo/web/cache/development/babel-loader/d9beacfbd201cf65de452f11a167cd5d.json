{"ast":null,"code":"import React from \"react\";\nimport globalStyles from \"../styles/globalStyles.js\";\nimport TypeBadge from \"./TypeBadge\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction formatId(id) {\n  var num = '' + id;\n\n  while (num.length < 3) {\n    num = '0' + num;\n  }\n\n  num = '#' + num;\n  return num;\n}\n\nvar Item = function Item(_ref) {\n  var item = _ref.item;\n  return console.warn(item), _jsx(View, {\n    style: styles.container,\n    children: _jsxs(View, {\n      style: [styles.card, {\n        backgroundColor: globalStyles[\"backgroundtype\" + item.types[0].type.name]\n      }],\n      children: [_jsx(View, {\n        style: styles.pokeball\n      }), _jsx(View, {\n        styles: styles.sixbythree\n      }), _jsxs(View, {\n        styles: styles.cardData,\n        children: [_jsxs(Text, {\n          styles: styles.cardId,\n          children: [formatId(item.id), \" Text and stuff\"]\n        }), _jsx(Text, {\n          styles: styles.cardName,\n          children: item.name\n        }), _jsxs(View, {\n          styles: styles.cardTypes,\n          children: [_jsx(TypeBadge, {\n            type: item.types[0].type.name\n          }), item.types.length === 2 && _jsx(TypeBadge, {\n            type: item.types[1].type.name\n          })]\n        })]\n      })]\n    })\n  });\n};\n\nvar List = function List(_ref2) {\n  var searchPhrase = _ref2.searchPhrase,\n      setClicked = _ref2.setClicked,\n      data = _ref2.data;\n\n  var renderItem = function renderItem(_ref3) {\n    var item = _ref3.item;\n\n    if (searchPhrase === \"\") {\n      return _jsx(_Fragment, {\n        children: _jsx(Item, {\n          item: item\n        })\n      });\n    }\n\n    if (item.name.includes(searchPhrase.toLowerCase().trim().replace(/\\s/g, \"\")) || item.types[0].type.name.includes(searchPhrase.toLowerCase().trim().replace(/\\s/g)) || (item.types[1] ? item.types[1].type.name.includes(searchPhrase.toLowerCase().trim().replace(/\\s/g)) : '')) {\n      return _jsx(_Fragment, {\n        children: _jsx(Item, {\n          item: item\n        })\n      });\n    }\n  };\n\n  return _jsx(SafeAreaView, {\n    style: styles.list__container,\n    children: _jsx(View, {\n      onStartShouldSetResponder: function onStartShouldSetResponder() {\n        setClicked(false);\n      },\n      children: _jsx(FlatList, {\n        data: data,\n        renderItem: renderItem,\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        }\n      })\n    })\n  });\n};\n\nexport default List;\nvar styles = StyleSheet.create({\n  list__container: {\n    margin: 0,\n    width: \"100%\"\n  },\n  item: {\n    margin: 30\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    marginBottom: 5,\n    fontStyle: \"italic\"\n  },\n  container: {\n    position: 'relative',\n    margin: 0\n  },\n  card: {\n    display: 'flex',\n    borderRadius: 10,\n    marginTop: 30,\n    height: 115,\n    padding: 20,\n    backgroundColor: globalStyles.typenormal\n  },\n  cardId: {\n    color: '#FF0000'\n  }\n});","map":{"version":3,"names":["React","globalStyles","TypeBadge","formatId","id","num","length","Item","item","console","warn","styles","container","card","backgroundColor","types","type","name","pokeball","sixbythree","cardData","cardId","cardName","cardTypes","List","searchPhrase","setClicked","data","renderItem","includes","toLowerCase","trim","replace","list__container","StyleSheet","create","margin","width","title","fontSize","fontWeight","marginBottom","fontStyle","position","display","borderRadius","marginTop","height","padding","typenormal","color"],"sources":["C:/Users/Kieran/Documents/WebDevStuff/PokeDB-RN/pokedex/components/List.js"],"sourcesContent":["// List.js\r\nimport React from \"react\";\r\nimport globalStyles from '../styles/globalStyles.js';\r\nimport TypeBadge from './TypeBadge';\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  FlatList,\r\n  SafeAreaView,\r\n} from \"react-native\";\r\n\r\nfunction formatId(id) {\r\n  var num = '' + id;\r\n  while (num.length < 3){\r\n      num = '0' + num;\r\n  }\r\n  num = '#'+num;\r\n  return num;\r\n}\r\n\r\n// definition of the Item, which will be rendered in the FlatList\r\nconst Item = ({ item }) => (\r\n    console.warn(item),\r\n    <View style={styles.container}>\r\n        <View style={[styles.card, {backgroundColor: globalStyles[\"backgroundtype\"+item.types[0].type.name]}]}>\r\n            <View style={styles.pokeball}>\r\n                {/* TODO: Pokeball Image here */}\r\n            </View>\r\n            <View styles={styles.sixbythree}>\r\n                {/* TODO: Dots Image here */}\r\n            </View>\r\n            {/* <new Image styles={styles.sprite} source={item.sprites.front_default} /> */}\r\n        <View styles={styles.cardData}>\r\n            <Text styles={styles.cardId}>{formatId(item.id)} Text and stuff</Text>\r\n            <Text styles={styles.cardName}>{item.name}</Text>\r\n            <View styles={styles.cardTypes}>\r\n            <TypeBadge type={item.types[0].type.name} />\r\n                    {item.types.length === 2 && \r\n                    <TypeBadge type={item.types[1].type.name} />\r\n                    }\r\n            </View>\r\n        </View>\r\n        \r\n        \r\n        </View>\r\n    </View>\r\n);\r\n\r\n// the filter\r\nconst List = ({ searchPhrase, setClicked, data }) => {\r\n  const renderItem = ({ item }) => {\r\n    // when no input, show all\r\n    if (searchPhrase === \"\") {\r\n      return <><Item item={item} /></>;\r\n    }\r\n    // filter of the name\r\n    if (item.name.includes(searchPhrase.toLowerCase().trim().replace(/\\s/g, \"\"))\r\n        || item.types[0].type.name.includes(searchPhrase.toLowerCase().trim().replace(/\\s/g))\r\n        || (item.types[1] ? item.types[1].type.name.includes(searchPhrase.toLowerCase().trim().replace(/\\s/g)) : ''))\r\n        {\r\n      return <><Item item={item} /></>;\r\n    }\r\n    // filter of types\r\n    // if (item.details.toUpperCase().includes(searchPhrase.toUpperCase().trim().replace(/\\s/g, \"\"))) {\r\n    //   return <Item name={item.name} details={item.details} />;\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={styles.list__container}>\r\n      <View\r\n        onStartShouldSetResponder={() => {\r\n          setClicked(false);\r\n        }}\r\n      >\r\n        <FlatList\r\n          data={data}\r\n          renderItem={renderItem}\r\n          keyExtractor={(item) => item.id}\r\n        />\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default List;\r\n\r\nconst styles = StyleSheet.create({\r\n  list__container: {\r\n    margin: 0,\r\n    width: \"100%\",\r\n  },\r\n\r\n  item: {\r\n    margin: 30,\r\n  },\r\n  \r\n  title: {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\",\r\n    marginBottom: 5,\r\n    fontStyle: \"italic\",\r\n  },\r\n  \r\n  container: {\r\n    position: 'relative',\r\n    margin: 0,\r\n  },\r\n\r\n  card: {\r\n    display: 'flex',\r\n    borderRadius: 10,\r\n    marginTop: 30,\r\n    height: 115,\r\n    padding: 20,\r\n    backgroundColor: globalStyles.typenormal\r\n  },\r\n\r\n  // pokeball: {\r\n  //   position: 'absolute',\r\n  //   right: -15,\r\n  //   bottom: 0,\r\n  //   height: 145,\r\n  //   width: 145,\r\n  // },\r\n  // sixbythree: {\r\n  //   position: 'absolute',\r\n  //   top: 25,\r\n  //   left: 90,\r\n  //   width: 74,\r\n  //   height: 32,\r\n  // },\r\n  // sprite: {\r\n\r\n  // },\r\n  \r\n  // cardData: {\r\n  //   display: 'flex',\r\n  //   flexDirection: 'column',\r\n  // },\r\n  \r\n  // cardTypes: {\r\n  //   display: 'flex',\r\n  //   flexDirection: 'row'\r\n  // },\r\n  \r\n  cardId: {\r\n    color: '#FF0000',\r\n  },\r\n  \r\n  // cardName: {\r\n  //   textTransform: 'capitalize',\r\n  //   fontWeight: '700',\r\n  //   fontSize: 26,\r\n  //   lineHeight: 31,\r\n  //   color: globalStyles.textwhite,\r\n  //   margin: 0,\r\n  //   zIndex: 0,\r\n  // },\r\n  \r\n  // cardImg: {\r\n  //   position: 'absolute',\r\n  //   right: 10,\r\n  //   bottom: 25,\r\n  //   height: 130,\r\n  //   width: 130,\r\n  // },\r\n\r\n//   @media screen and (max-width: 320px) {\r\n//     .card-img, .card-sixbythree {\r\n//       display: 'none';\r\n//     }\r\n//   }\r\n\r\n\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}