{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport globalStyles from \"../../styles/globalStyles.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar StatsTable = function StatsTable(props) {\n  return _jsx(View, {});\n};\n\nexport default StatsTable;\nvar styles = StyleSheet.create({\n  container: {\n    position: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    width: '100%',\n    marginBottom: 22.5\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","globalStyles","StatsTable","props","styles","StyleSheet","create","container","position","flexDirection","justifyContent","width","marginBottom"],"sources":["C:/Users/Kieran/Documents/WebDevStuff/PokeDB-RN/pokedex/components/Profile/StatsTable.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\n\r\nimport globalStyles from '../../styles/globalStyles.js';\r\n\r\nconst StatsTable = (props) => {\r\n    // const [statsTable, setStatsTable] = useState();\r\n    // const [statsTotal, setStatsTotal] = useState(0);\r\n\r\n    // function addStatsToTotal(){\r\n    //     let statTotal = 0\r\n    //     for (var i = 0; i < props.stats.length; i++)\r\n    //     {\r\n    //         statTotal += Number(props.stats[i].base_stat);\r\n    //     }\r\n    //     setStatsTotal(statTotal);\r\n    // }\r\n\r\n    // function formatStat(stat) {\r\n    //     switch(stat) {\r\n    //         case 'hp': return 'HP';\r\n    //         case 'attack': return 'Attack';\r\n    //         case 'defense': return 'Defense';\r\n    //         case 'special-attack': return 'Sp. Att';\r\n    //         case 'special-defense': return 'Sp. Def';\r\n    //         case 'speed': return 'Speed';\r\n    //         default: return '';\r\n    //     }\r\n    // }\r\n\r\n    // function calcStatBarWidth(name, value ){\r\n    //     switch(name){\r\n    //         case 'hp': return ((value/255)*100)+'%';\r\n    //         case 'attack': return (value/181)*100;\r\n    //         case 'defense': return (value/230)*100;\r\n    //         case 'special-attack': return (value/180)*100;\r\n    //         case 'special-defense': return (value/230)*100;\r\n    //         case 'speed': return (value/200)*100;\r\n    //         case 'total': return ((value-175)/720)*100;\r\n    //         default: return 0;\r\n    //     }\r\n    // }\r\n    // useEffect(() => {\r\n    //     addStatsToTotal();\r\n    //     const createStatsTable = props.stats.map((stat) => \r\n    //         <View key={stat.stat.name} style={styles.rowContainer}>\r\n    //             <Text style={styles.statName}>\r\n    //                {formatStat(stat.stat.name)}\r\n    //             </Text>\r\n    //             <Text style={styles.statBaseStat}>\r\n    //                 {stat.base_stat}\r\n    //             </Text>\r\n    //             <View style={styles.statBarContainer}>\r\n    //                 <View style={[styles.statBar, {backgroundColor: globalStyles[\"type\"+props.type], width: calcStatBarWidth(stat.stat.name, stat.base_stat)}]}>\r\n    //                 </View>\r\n    //             </View>\r\n    //                 <Text style={styles.statLow}>\r\n    //                     {stat.stat.name === 'hp'\r\n    //                     // HP Calulator: (((2x Base+ IV + (EV/4)*Level)/100)+Level+10)\r\n    //                     ? (Math.floor((((2*stat.base_stat+0+(0/4))*100)/100)+110))\r\n    //                     //  Stat Calulator: ((((2*Base+IV+(EV/4)*Level)/100)+5)*Nature) \r\n    //                     : (Math.floor(((((2*stat.base_stat+0+(0/4))*100)/100)+5)*0.9))\r\n    //                     }\r\n    //                 </Text>\r\n    //                 <Text style={styles.statHigh}>\r\n    //                     {stat.stat.name === 'hp'\r\n    //                     // HP Calulator: (((2x Base+ IV + (EV/4)*Level)/100)+Level+10)\r\n    //                     ? (Math.floor((((2*stat.base_stat+31+(252/4))*100)/100)+110))\r\n    //                     //  Stat Calulator: ((((2*Base+IV+(EV/4)*Level)/100)+5)*Nature) \r\n    //                     : (Math.floor(((((2*stat.base_stat+31+(252/4))*100)/100)+5)*1.1))\r\n    //                     }\r\n    //                 </Text>\r\n    //         </View>\r\n    //     )\r\n    //     setStatsTable(createStatsTable);\r\n    // },[]);\r\n\r\n    return (\r\n    <View>\r\n        {/* </View>/<View style={styles.container}>\r\n             {statsTable}\r\n            <View style={[styles.rowContainer, {marginTop: 2.5}]}>\r\n            <Text style={styles.statName}>\r\n                   Total\r\n                </Text>\r\n                <Text style={[styles.statBaseStat, {fontSize:16}, {fontWeight:'700'}]}>\r\n                    {statsTotal}\r\n                </Text>\r\n                <View style={styles.statBarContainer}>\r\n                <View style={[styles.statBar, {backgroundColor: globalStyles[\"backgroundtype\"+props.type], width: calcStatBarWidth('total', statsTotal)}]}>\r\n                    </View>\r\n                </View>\r\n                    <Text style={[styles.statLow, {fontSize:12, fontWeight:'500', color: globalStyles.textblack}]}>\r\n                        Min\r\n                    </Text>\r\n                    <Text style={[styles.statHigh, {fontSize:12, fontWeight:'500', color: globalStyles.textblack}]}>\r\n                        Max\r\n                    </Text>\r\n            </View> */}\r\n        </View>\r\n    )\r\n};\r\n\r\nexport default StatsTable;\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n\r\n    container: {\r\n        position: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        width: '100%',\r\n        marginBottom: 22.5\r\n    },\r\n\r\n    // rowContainer: {\r\n    //     position: 'flex',\r\n    //     flexDirection: 'row',\r\n    //     gap: 10,\r\n    //     alignItems: 'center'\r\n    // },\r\n\r\n    // statName: {\r\n    //     width: '20%',\r\n    //     textTransform: 'capitalize',\r\n    //     fontSize: 12,\r\n    //     fontWeight: '500',\r\n    //     color: globalStyles.textblack\r\n    // },\r\n\r\n    // statBaseStat: {\r\n    //     width: '12%',\r\n    //     fontSize: 16,\r\n    //     fontWeight: '400',\r\n    //     color: globalStyles.textgrey,\r\n    //     textAlign: 'right'\r\n    // },\r\n\r\n    // statBarContainer: {\r\n    //     width: '40%',\r\n    //     height: 4\r\n    // },\r\n\r\n    // statBar: {\r\n    //     marginHorizontal: 10,\r\n    //     backgroundColor: globalStyles.typenormal,\r\n    //     height: 4,\r\n    // },\r\n\r\n    // statLow: {\r\n    //     width: '9%',\r\n    //     width: '9%',\r\n    //     fontSize: 16,\r\n    //     fontWeight: '400',\r\n    //     color: globalStyles.textgrey,\r\n    //     textAlign: 'right'\r\n    // },\r\n\r\n    // statHigh: {\r\n    //     width: '9%',\r\n    //     width: '9%',\r\n    //     fontSize: 16,\r\n    //     fontWeight: '400',\r\n    //     color: globalStyles.textgrey,\r\n    //     textAlign: 'right'\r\n    // },\r\n\r\n})"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAGA,OAAOC,YAAP;;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;EAwE1B,OACA,KAAC,IAAD,KADA;AAwBH,CAhGD;;AAkGA,eAAeD,UAAf;AAGA,IAAME,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;EAE7BC,SAAS,EAAE;IACPC,QAAQ,EAAE,MADH;IAEPC,aAAa,EAAE,QAFR;IAGPC,cAAc,EAAE,QAHT;IAIPC,KAAK,EAAE,MAJA;IAKPC,YAAY,EAAE;EALP;AAFkB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}